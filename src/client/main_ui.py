# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ChatWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import asyncio
import json
from importlib.util import set_loader

import requests
import websockets
from PyQt5 import QtCore, QtGui, QtWebSockets, QtWidgets
from PyQt5.QtCore import QUrl
from qasync import QEventLoop

from ui_lib import Ui_MainWindow


class Receiving_Thread(QtCore.QObject):
    string_signal = QtCore.pyqtSignal(str)
    is_running = True

    def __init__(self, loop: asyncio.AbstractEventLoop, url):
        super().__init__()
        self.url = url
        self.loop = loop

    async def ws_connection(self):
        print(f"Connecting to {self.url}")
        async with websockets.connect(self.url) as websocket:
            # print("OK")
            while self.is_running:
                message = await websocket.recv()
                # print(message)
                self.string_signal.emit(message)

    def start(self):
        asyncio.ensure_future(self.ws_connection(), loop=self.loop)

    def __del__(self):
        self.is_running = False


class Sending_Thread(QtCore.QObject):
    string_signal = QtCore.pyqtSignal(str)
    is_running = True

    def __init__(self, loop: asyncio.AbstractEventLoop, url):
        super().__init__()
        self.url = url
        self.loop = loop
        self.socket = QtWebSockets.QWebSocket()
        self.socket.open(QUrl(url))

    def send_message(self, message):
        self.socket.sendTextMessage(message)

    def start(self):
        pass

    def __del__(self):
        self.socket.close()


class Broadcast_Thread(QtCore.QObject):
    string_signal = QtCore.pyqtSignal(str)
    is_running = True

    def __init__(self, loop: asyncio.AbstractEventLoop, url, username):
        super().__init__()
        self.url = url
        self.loop = loop
        self.username = username

    async def ws_connection(self):
        print(f"Connecting to {self.url}")
        async with websockets.connect(self.url) as websocket:
            # print("OK")
            await websocket.send(json.dumps({"username": self.username}))
            while self.is_running:
                await websocket.recv()
                message = self.string_signal.emit()

    def start(self):
        asyncio.ensure_future(self.ws_connection(), loop=self.loop)

    def __del__(self):
        self.is_running = False


class GUI(Ui_MainWindow, QtWidgets.QMainWindow):
    chat_server = "127.0.0.1:8000"
    chat_topic = ""
    username = None

    incoming_worker, outgoing_worker, broadcast_worker = None, None, None

    def setupUi(self, MainWindow):
        super().setupUi(MainWindow)
        self.chatBar.returnPressed.connect(self.on_outgoing_message)
        self.topicList.itemClicked.connect(self.on_topic_clicked)
        self.createTopicBtn.clicked.connect(self.on_create_topic)
        self.actionChange_Username.triggered.connect(self.on_change_username)
        self.actionChange_Server.triggered.connect(self.on_change_server)
        self.actionExit.triggered.connect(MainWindow.close)

        self.on_load()

    def retranslateUi(self, MainWindow):
        super().retranslateUi(MainWindow)

    def on_create_topic(self):
        topic_name, ok = QtWidgets.QInputDialog.getText(
            self, "Create Topic", "Topic Name:"
        )
        if ok:
            requests.post(
                f"http://{self.chat_server}/messages/create_topic",
                params={"topic": topic_name},
            )
            self.on_load()

    def on_change_username(self):
        username, ok = QtWidgets.QInputDialog.getText(
            self, "Change Username", "Enter new username:"
        )
        if ok:
            self.username = username
            self.on_load()

    def on_change_server(self):
        server, ok = QtWidgets.QInputDialog.getText(
            self, "Change Server", "Enter new server:"
        )
        if ok:
            self.chat_server = server
            self.on_load()

    def on_load(self):
        if self.username is None:
            self.username, ok = QtWidgets.QInputDialog.getText(
                self, "Change Username", "Enter username:"
            )
            if not ok:
                self.username = "Anonymous"

        self.topicList.clear()
        self.chatContent.clear()
        self.chatBar.clear()

        print(f"http://{self.chat_server}/messages/topics")
        topics = requests.get(f"http://{self.chat_server}/messages/topics").json()
        for topic in topics:
            topicItem = QtWidgets.QListWidgetItem(topic)
            self.topicList.addItem(topicItem)

    def on_topic_clicked(self):
        topic = self.topicList.currentItem().text()
        print(f"Select topic: {topic}")
        self.chat_topic = topic

        self.chatContent.clear()
        self.chatBar.clear()

        if self.incoming_worker:
            self.incoming_worker.string_signal.disconnect()
            del self.incoming_worker
        if self.outgoing_worker:
            del self.outgoing_worker
        if self.broadcast_worker:
            self.broadcast_worker.string_signal.disconnect()
            del self.broadcast_worker

        asyncio.get_running_loop().create_task(self.connect_to_server())

    async def connect_to_server(self):
        loop = asyncio.get_event_loop()

        ws_incoming_url = f"ws://{self.chat_server}/messages/incoming/{self.chat_topic}"
        ws_outgoing_url = f"ws://{self.chat_server}/messages/outgoing/{self.chat_topic}"
        ws_broadcast_url = (
            f"ws://{self.chat_server}/messages/broadcast/{self.chat_topic}"
        )

        self.incoming_worker = Receiving_Thread(loop, ws_incoming_url)
        self.incoming_worker.string_signal.connect(self.on_incoming_message)

        self.outgoing_worker = Sending_Thread(loop, ws_outgoing_url)

        self.broadcast_worker = Broadcast_Thread(loop, ws_broadcast_url, self.username)
        self.broadcast_worker.string_signal.connect(self.on_broadcast_message)

        self.incoming_worker.start()
        self.outgoing_worker.start()
        self.broadcast_worker.start()

    def on_incoming_message(self, message):
        content = json.loads(message)
        self.chatContent.appendPlainText(f"{content['sender']}: {content['message']}")

    def on_outgoing_message(self):
        message = self.chatBar.text()
        message_obj = {"sender": self.username, "message": message}
        self.chatBar.clear()
        self.outgoing_worker.send_message(json.dumps(message_obj))

    def on_broadcast_message(self, message):
        self.chatContent.appendPlainText(f"{message}")


def main():
    import sys

    app = QtWidgets.QApplication(sys.argv)
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)
    MainWindow = QtWidgets.QMainWindow()
    ui = GUI()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
